Group 6
Members: Kathleen Sungu Lee kl2926 - Seungwook Han sh3264 - Vladislav Scherbich vss2113

1. 
	1. src - The source space (src) contains the source code of catkin packages and this is where you can extract/checkout/clone source code for the packages you want to build. 
	2. build - The build space is where CMake is invoked to build catkin packages in the source space (src). CMake and catkin keep their cache information and other intermediate files here. 
	3. devel - The development space (devel) is where built targets are placed prior to being installed. The targets are organized in the same layout as they are installed which provides a useful testing and development environment which does not require invoking the installation step. 
	4. log - The Node log file contains log messages, which are string messages that convey the status of a node. All enabled messages (DEBUG, INFO, WARN, ERROR, and FATAL) goes into the log file. 
	5. install - Once targets are built, they can be installed in the install space by invoking the install target, usually using the command ‘make install’. 

2. A node is an executable file within a ROS package. ROS nodes use a ROS client library to communicate with other nodes. They can publish or subscribe to a topic, and they can provide or use a service.

3. Packages are the software organization unit of ROS code. Each package can contain libraries, executables, scripts, or other artifacts.

4. 
	1. ROS Master: provides naming and registration services to to the other nodes in the ROS system. It tracks publishers and subscribers to topics / services. Master enables nodes to locate each other, after which point they communicate with each other directly.
	
	2. ROS Parameter Server: is a shared, multi-variate dictionary that's accessible via network APIs. It's used by nodes to store/retrieve run-time parameters. Since it's not designed for high performance, it's best to store non-binary data such as config params. Parameter Server is globally accessible.

	3. rosout node: is used for subscribing, logging, and republishing of messages.

5. 
	1. ROS Topic: when you have mutliple producers writing to, or multiple consumers reading from, a topic. Also when nodes aren't aware of each other.

	2. ROS Service: enables direct communication between two nodes. Use it when nodes are aware of each other's existence. 

	3. ROS Action: 

6.
	1. /use_gui, boolean

	2. staubli_tx60

	3. staubli_controller
