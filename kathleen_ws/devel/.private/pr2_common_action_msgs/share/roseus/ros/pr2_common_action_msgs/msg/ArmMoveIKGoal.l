;; Auto-generated. Do not edit!


(when (boundp 'pr2_common_action_msgs::ArmMoveIKGoal)
  (if (not (find-package "PR2_COMMON_ACTION_MSGS"))
    (make-package "PR2_COMMON_ACTION_MSGS"))
  (shadow 'ArmMoveIKGoal (find-package "PR2_COMMON_ACTION_MSGS")))
(unless (find-package "PR2_COMMON_ACTION_MSGS::ARMMOVEIKGOAL")
  (make-package "PR2_COMMON_ACTION_MSGS::ARMMOVEIKGOAL"))

(in-package "ROS")
;;//! \htmlinclude ArmMoveIKGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))
(if (not (find-package "SENSOR_MSGS"))
  (ros::roseus-add-msgs "sensor_msgs"))


(defclass pr2_common_action_msgs::ArmMoveIKGoal
  :super ros::object
  :slots (_pose _tool_frame _ik_seed _ik_timeout _move_duration ))

(defmethod pr2_common_action_msgs::ArmMoveIKGoal
  (:init
   (&key
    ((:pose __pose) (instance geometry_msgs::PoseStamped :init))
    ((:tool_frame __tool_frame) (instance geometry_msgs::PoseStamped :init))
    ((:ik_seed __ik_seed) (instance sensor_msgs::JointState :init))
    ((:ik_timeout __ik_timeout) (instance ros::time :init))
    ((:move_duration __move_duration) (instance ros::time :init))
    )
   (send-super :init)
   (setq _pose __pose)
   (setq _tool_frame __tool_frame)
   (setq _ik_seed __ik_seed)
   (setq _ik_timeout __ik_timeout)
   (setq _move_duration __move_duration)
   self)
  (:pose
   (&rest __pose)
   (if (keywordp (car __pose))
       (send* _pose __pose)
     (progn
       (if __pose (setq _pose (car __pose)))
       _pose)))
  (:tool_frame
   (&rest __tool_frame)
   (if (keywordp (car __tool_frame))
       (send* _tool_frame __tool_frame)
     (progn
       (if __tool_frame (setq _tool_frame (car __tool_frame)))
       _tool_frame)))
  (:ik_seed
   (&rest __ik_seed)
   (if (keywordp (car __ik_seed))
       (send* _ik_seed __ik_seed)
     (progn
       (if __ik_seed (setq _ik_seed (car __ik_seed)))
       _ik_seed)))
  (:ik_timeout
   (&optional __ik_timeout)
   (if __ik_timeout (setq _ik_timeout __ik_timeout)) _ik_timeout)
  (:move_duration
   (&optional __move_duration)
   (if __move_duration (setq _move_duration __move_duration)) _move_duration)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _pose
    (send _pose :serialization-length)
    ;; geometry_msgs/PoseStamped _tool_frame
    (send _tool_frame :serialization-length)
    ;; sensor_msgs/JointState _ik_seed
    (send _ik_seed :serialization-length)
    ;; duration _ik_timeout
    8
    ;; duration _move_duration
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _pose
       (send _pose :serialize s)
     ;; geometry_msgs/PoseStamped _tool_frame
       (send _tool_frame :serialize s)
     ;; sensor_msgs/JointState _ik_seed
       (send _ik_seed :serialize s)
     ;; duration _ik_timeout
       (write-long (send _ik_timeout :sec) s) (write-long (send _ik_timeout :nsec) s)
     ;; duration _move_duration
       (write-long (send _move_duration :sec) s) (write-long (send _move_duration :nsec) s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _pose
     (send _pose :deserialize buf ptr-) (incf ptr- (send _pose :serialization-length))
   ;; geometry_msgs/PoseStamped _tool_frame
     (send _tool_frame :deserialize buf ptr-) (incf ptr- (send _tool_frame :serialization-length))
   ;; sensor_msgs/JointState _ik_seed
     (send _ik_seed :deserialize buf ptr-) (incf ptr- (send _ik_seed :serialization-length))
   ;; duration _ik_timeout
     (send _ik_timeout :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _ik_timeout :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; duration _move_duration
     (send _move_duration :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _move_duration :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get pr2_common_action_msgs::ArmMoveIKGoal :md5sum-) "659cdac4f142756518faf4644a34bdda")
(setf (get pr2_common_action_msgs::ArmMoveIKGoal :datatype-) "pr2_common_action_msgs/ArmMoveIKGoal")
(setf (get pr2_common_action_msgs::ArmMoveIKGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# the desired pose of the tool frame
geometry_msgs/PoseStamped pose

# tool frame defauts to x_wrist_roll_link
geometry_msgs/PoseStamped tool_frame

# the joint space configuration to resolve redundancy
sensor_msgs/JointState ik_seed

duration ik_timeout
duration move_duration

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

")



(provide :pr2_common_action_msgs/ArmMoveIKGoal "659cdac4f142756518faf4644a34bdda")


