diff -r d1c050d67b0a cmake/SearchForStuff.cmake
--- a/cmake/SearchForStuff.cmake	Fri Apr 08 10:52:57 2011 -0700
+++ b/cmake/SearchForStuff.cmake	Wed Apr 13 16:57:40 2011 -0700
@@ -105,6 +105,19 @@
     SET (ODE_CONTACT_BODY_MAXVEL TRUE CACHE BOOL "support for ODE quickstep experimental contact stuff")
   ENDIF (NOT ODE_WG_MAXVEL_PATCHES_FOUND)
 
+  ##############################################
+  #                                            #
+  #   patched ode version with screw joint     #
+  #                                            #
+  ##############################################
+  SET(ODE_WG_SCREW_PATCHES_VERSION 0.11.1.70 CACHE INTERNAL "ODE version with mavel and mindep per body" FORCE)
+  pkg_check_modules(ODE_WG_SCREW_PATCHES ode>=${ODE_WG_SCREW_PATCHES_VERSION})
+  IF (NOT ODE_WG_SCREW_PATCHES_FOUND)
+    SET (ODE_SCREW_JOINT FALSE CACHE BOOL "support for ODE quickstep experimental screw stuff")
+  ELSE (NOT ODE_WG_SCREW_PATCHES_FOUND)
+    SET (ODE_SCREW_JOINT TRUE CACHE BOOL "support for ODE quickstep experimental screw stuff")
+  ENDIF (NOT ODE_WG_SCREW_PATCHES_FOUND)
+
   #################################################
   # Find OGRE 
   pkg_check_modules(OGRE-RTShaderSystem OGRE-RTShaderSystem>=${MIN_OGRE_VERSION})
diff -r d1c050d67b0a gazebo_config.h.in
--- a/gazebo_config.h.in	Fri Apr 08 10:52:57 2011 -0700
+++ b/gazebo_config.h.in	Wed Apr 13 16:57:40 2011 -0700
@@ -17,6 +17,7 @@
 #cmakedefine INCLUDE_ODE_JOINT_DAMPING 1
 #cmakedefine QUICKSTEP_EXPERIMENTAL 1
 #cmakedefine ODE_CONTACT_BODY_MAXVEL 1
+#cmakedefine ODE_SCREW_JOINT 1
 #cmakedefine PARALLEL_QUICKSTEP 1
 #cmakedefine INCLUDE_RTSHADER 1
 #cmakedefine ENABLE_TIMERS 1
diff -r d1c050d67b0a server/Model.cc
--- a/server/Model.cc	Fri Apr 08 10:52:57 2011 -0700
+++ b/server/Model.cc	Wed Apr 13 16:57:40 2011 -0700
@@ -935,6 +935,8 @@
     jtype = Joint::HINGE;
   else if (node->GetName() == "ball")
     jtype = Joint::BALL;
+  else if (node->GetName() == "screw")
+    jtype = Joint::SCREW;
   else if (node->GetName() == "slider")
     jtype = Joint::SLIDER;
   else if (node->GetName() == "hinge2")
diff -r d1c050d67b0a server/physics/CMakeLists.txt
--- a/server/physics/CMakeLists.txt	Fri Apr 08 10:52:57 2011 -0700
+++ b/server/physics/CMakeLists.txt	Wed Apr 13 16:57:40 2011 -0700
@@ -51,6 +51,7 @@
              Joint.hh
              PhysicsEngine.hh
              SliderJoint.hh
+             ScrewJoint.hh
              UniversalJoint.hh
              Mass.hh
              Geom.hh
diff -r d1c050d67b0a server/physics/Joint.cc
--- a/server/physics/Joint.cc	Fri Apr 08 10:52:57 2011 -0700
+++ b/server/physics/Joint.cc	Wed Apr 13 16:57:40 2011 -0700
@@ -36,7 +36,7 @@
 
 using namespace gazebo;
 
-std::string Joint::TypeNames[Joint::TYPE_COUNT] = {"slider", "hinge", "hinge2", "ball", "universal"};
+std::string Joint::TypeNames[Joint::TYPE_COUNT] = {"screw", "slider", "hinge", "hinge2", "ball", "universal"};
 
 //////////////////////////////////////////////////////////////////////////////
 // Constructor
@@ -205,6 +205,9 @@
 
   switch (this->type)
   {
+    case SCREW: 
+      typeName="screw"; 
+      break;
     case SLIDER: 
       typeName="slider"; 
       break;
diff -r d1c050d67b0a server/physics/Joint.hh
--- a/server/physics/Joint.hh	Fri Apr 08 10:52:57 2011 -0700
+++ b/server/physics/Joint.hh	Wed Apr 13 16:57:40 2011 -0700
@@ -49,7 +49,7 @@
   class Joint : public Common
   {
     /// \brief Type of joint
-    public: enum Type {SLIDER, HINGE, HINGE2, BALL, UNIVERSAL, FIXED, TYPE_COUNT};
+    public: enum Type {SCREW, SLIDER, HINGE, HINGE2, BALL, UNIVERSAL, FIXED, TYPE_COUNT};
     public: enum Attribute {FUDGE_FACTOR, SUSPENSION_ERP, SUSPENSION_CFM, STOP_ERP,STOP_CFM,ERP,CFM,FMAX,VEL,HI_STOP,LO_STOP};
 
     /// \brief Type names of joint
diff -r d1c050d67b0a server/physics/ScrewJoint.hh
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/server/physics/ScrewJoint.hh	Wed Apr 13 16:57:40 2011 -0700
@@ -0,0 +1,154 @@
+/*
+ *  Gazebo - Outdoor Multi-Robot Simulator
+ *  Copyright (C) 2003  
+ *     Nate Koenig & Andrew Howard
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+/* Desc: A screw or primastic/rotational joint
+ * Author: Nate Keonig, Andrew Howard
+ * Date: 21 May 2003
+ * CVS: $Id$
+ */
+
+#ifndef SCREWJOINT_HH
+#define SCREWJOINT_HH
+
+#include <float.h>
+#include "Param.hh"
+#include "Joint.hh"
+
+namespace gazebo
+{
+
+/// \addtogroup gazebo_physics_joints
+/// \{
+/** \defgroup gazebo_screw_joint Screw Joint
+  
+  \brief A screw joint
+
+  \par Attributes
+  - body1 (string)
+    - Name of the first body to attach to the joint
+  - body2 (string)
+    - Name of the second body to attach to the joint
+  - anchor (string)
+    - Name of the body which will act as the anchor to the joint
+  - axis (float, tuple)
+    - Defines the axis of movement
+    - Default: 0 0 1
+  - lowStop (float, meters)
+    - The low stop position
+    - Default: infinity
+  - highStop (float, meters)
+    - The high stop position
+    - Default: infinity
+  - erp (double)
+    - Error reduction parameter. 
+    - Default = 0.4
+  - cfm (double)
+    - Constraint force mixing. 
+    - Default = 0.8
+
+
+  \par Example
+  \verbatim
+  <joint:screw name="screw_joint>
+    <body1>body1_name</body1>
+    <body2>body2_name</body2>
+    <anchor>anchor_body</anchor>
+    <axis>0 0 1</axis>
+    <lowStop>0</lowStop>
+    <highStop>30</highStop>
+  </joint:screw>
+  \endverbatim
+*/
+/// \}
+
+
+/// \addtogroup gazebo_screw_joint Screw Joint
+/// \{
+
+  /// \brief A screw joint
+  template<class T>
+  class ScrewJoint : public T
+  {
+    /// \brief Constructor
+    public: ScrewJoint( ) : T()
+            {
+              this->type = Joint::SCREW;
+
+              Param::Begin(&this->parameters);
+              this->axisP = new ParamT<Vector3>("axis",Vector3(0,0,1), 0);
+              this->loStopP = new ParamT<double>("lowStop",-DBL_MAX,0);
+              this->hiStopP = new ParamT<double>("highStop",DBL_MAX,0);
+              this->dampingP = new ParamT<double>("damping",0.0, 0);
+              Param::End();
+            } 
+
+    /// \brief Destructor
+    public: virtual ~ScrewJoint()
+            {
+              delete this->axisP;
+              delete this->loStopP;
+              delete this->hiStopP;
+              delete this->dampingP;
+            }
+
+    /// \brief Load the joint
+    protected: virtual void Load(XMLConfigNode *node)
+               {
+                 this->axisP->Load(node);
+                 this->loStopP->Load(node);
+                 this->hiStopP->Load(node);
+                 this->dampingP->Load(node);
+
+                 T::Load(node);
+
+                 this->SetAxis(0, **(this->axisP));
+
+                 // Perform this three step ordering to ensure the parameters 
+                 // are set properly. This is taken from the ODE wiki.
+                 this->SetHighStop(0,**(this->hiStopP));
+                 this->SetLowStop(0,**(this->loStopP));
+                 this->SetHighStop(0,**(this->hiStopP));
+                 //this->SetDamping(0, this->dampingP->GetValue()); // uncomment when opende damping is tested and ready
+               }
+  
+    /// \brief Save a joint to a stream in XML format
+    protected: virtual void SaveJoint(std::string &prefix, std::ostream &stream)
+               {
+                 T::SaveJoint(prefix, stream);
+                 stream << prefix << *(this->axisP) << "\n";
+                 stream << prefix << *(this->loStopP) << "\n";
+                 stream << prefix << *(this->hiStopP) << "\n";
+               }
+    /// \brief Set the anchor
+    public: virtual void SetAnchor( int index, const Vector3 &anchor) {fakeAnchor = anchor;}
+
+    /// \brief Get the anchor
+    public: virtual Vector3 GetAnchor(int index) const {return fakeAnchor;}
+ 
+    protected: ParamT<Vector3> *axisP;
+    protected: ParamT<double> *loStopP;
+    protected: ParamT<double> *hiStopP; 
+    protected: ParamT<double> *dampingP; 
+    protected: Vector3 fakeAnchor;
+  };
+  
+/// \}
+}
+#endif
diff -r d1c050d67b0a server/physics/bullet/BulletScrewJoint.cc
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/server/physics/bullet/BulletScrewJoint.cc	Wed Apr 13 16:57:40 2011 -0700
@@ -0,0 +1,181 @@
+/*
+ *  Gazebo - Outdoor Multi-Robot Simulator
+ *  Copyright (C) 2003
+ *     Nate Koenig & Andrew Howard
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+/* Desc: A bullet screw or primastic joint
+ * Author: Nate Keonig
+ * Date: 13 Oct 2009
+ * SVN: $Id:$
+ */
+
+
+#include "GazeboError.hh"
+#include "GazeboMessage.hh"
+#include "BulletBody.hh"
+#include "XMLConfig.hh"
+#include "BulletScrewJoint.hh"
+
+using namespace gazebo;
+
+//////////////////////////////////////////////////////////////////////////////
+// Constructor
+BulletScrewJoint::BulletScrewJoint( btDynamicsWorld *world  )
+    : ScrewJoint<BulletJoint>()
+{
+  this->world = world;
+  gzthrow("bullet screw constraint is copied from BulletSlider, not a screw joint.");
+}
+
+
+//////////////////////////////////////////////////////////////////////////////
+// Destructor
+BulletScrewJoint::~BulletScrewJoint()
+{
+}
+
+//////////////////////////////////////////////////////////////////////////////
+/// Load the joint
+void BulletScrewJoint::Load(XMLConfigNode *node)
+{
+  ScrewJoint<BulletJoint>::Load(node);
+}
+
+//////////////////////////////////////////////////////////////////////////////
+/// Attach the two bodies with this joint
+void BulletScrewJoint::Attach( Body *one, Body *two )
+{
+  ScrewJoint<BulletJoint>::Attach(one,two);
+  BulletBody *bulletBody1 = dynamic_cast<BulletBody*>(this->body1);
+  BulletBody *bulletBody2 = dynamic_cast<BulletBody*>(this->body2);
+
+  if (!bulletBody1 || !bulletBody2)
+    gzthrow("Requires bullet bodies");
+
+  btRigidBody *rigidBody1 = bulletBody1->GetBulletBody();
+  btRigidBody *rigidBody2 = bulletBody2->GetBulletBody();
+
+  btVector3 anchor, axis1, axis2;
+  btTransform frame1, frame2;
+  frame1 = btTransform::getIdentity();
+  frame2 = btTransform::getIdentity();
+
+  this->constraint = new btSliderConstraint( *rigidBody1, *rigidBody2,
+      frame1, frame2, true); 
+
+  // Add the joint to the world
+  this->world->addConstraint(this->constraint);
+
+  // Allows access to impulse
+  this->constraint->enableFeedback(true);
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Get the axis of rotation
+Vector3 BulletScrewJoint::GetAxis(int index) const
+{
+  return **this->axisP;
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Get the position of the joint
+Angle BulletScrewJoint::GetAngle(int index) const
+{
+  return ((btSliderConstraint*)this->constraint)->getLinearPos();
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Get the rate of change
+double BulletScrewJoint::GetVelocity(int index) const
+{
+  gzerr(0) << "Not implemented in bullet\n";
+  return 0;
+}
+
+//////////////////////////////////////////////////////////////////////////////
+/// Set the velocity of an axis(index).
+void BulletScrewJoint::SetVelocity(int index, double angle)
+{
+  gzerr(0) << "Not implemented in bullet\n";
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Set the axis of motion
+void BulletScrewJoint::SetAxis( int index, const Vector3 &axis )
+{
+  gzerr(0) << "Not implemented in bullet\n";
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Set the joint damping
+void BulletScrewJoint::SetDamping( int /*index*/, const double damping )
+{
+  gzerr(0) << "Not implemented\n";
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Set the screw force
+void BulletScrewJoint::SetForce(int index, double force)
+{
+  gzerr(0) << "Not implemented\n";
+}
+
+//////////////////////////////////////////////////////////////////////////////
+/// Set the high stop of an axis(index).
+void BulletScrewJoint::SetHighStop(int index, Angle angle)
+{
+  ((btSliderConstraint*)this->constraint)->setUpperLinLimit(angle.GetAsRadian());
+}
+
+//////////////////////////////////////////////////////////////////////////////
+/// Set the low stop of an axis(index).
+void BulletScrewJoint::SetLowStop(int index, Angle angle)
+{
+  ((btSliderConstraint*)this->constraint)->setLowerLinLimit(angle.GetAsRadian());
+}
+ 
+//////////////////////////////////////////////////////////////////////////////
+///  Get the high stop of an axis(index).
+Angle BulletScrewJoint::GetHighStop(int index)
+{
+  return ((btSliderConstraint*)this->constraint)->getUpperLinLimit();
+}
+
+//////////////////////////////////////////////////////////////////////////////
+///  Get the low stop of an axis(index).
+Angle BulletScrewJoint::GetLowStop(int index)
+{
+  return ((btSliderConstraint*)this->constraint)->getLowerLinLimit();
+}
+
+//////////////////////////////////////////////////////////////////////////////
+/// Set the max allowed force of an axis(index).
+void BulletScrewJoint::SetMaxForce(int /*index*/, double /*t*/)
+{
+  gzerr(0) << "Not implemented\n";
+}
+
+//////////////////////////////////////////////////////////////////////////////
+/// Get the max allowed force of an axis(index).
+double BulletScrewJoint::GetMaxForce(int /*index*/)
+{
+  gzerr(0) << "Not implemented\n";
+  return 0;
+}
+
+
diff -r d1c050d67b0a server/physics/bullet/BulletScrewJoint.hh
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/server/physics/bullet/BulletScrewJoint.hh	Wed Apr 13 16:57:40 2011 -0700
@@ -0,0 +1,145 @@
+/*
+ *  Gazebo - Outdoor Multi-Robot Simulator
+ *  Copyright (C) 2003  
+ *     Nate Koenig & Andrew Howard
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+/* Desc: A screw or primastic joint
+ * Author: Nate Keonig
+ * Date: 24 May 2009
+ * SVN: $Id:$
+ */
+
+#ifndef BULLETSCREWJOINT_HH
+#define BULLETSCREWJOINT_HH
+
+#include "Param.hh"
+#include "ScrewJoint.hh"
+#include "BulletJoint.hh"
+
+#include <btBulletDynamicsCommon.h>
+
+namespace gazebo
+{
+
+/// \addtogroup gazebo_physics_joints
+/// \{
+/** \defgroup gazebo_screw_joint Screw Joint
+  
+  \brief A screw joint
+
+  \par Attributes
+  - body1 (string)
+    - Name of the first body to attach to the joint
+  - body2 (string)
+    - Name of the second body to attach to the joint
+  - anchor (string)
+    - Name of the body which will act as the anchor to the joint
+  - axis (float, tuple)
+    - Defines the axis of movement
+    - Default: 0 0 1
+  - lowStop (float, meters)
+    - The low stop position
+    - Default: infinity
+  - highStop (float, meters)
+    - The high stop position
+    - Default: infinity
+  - erp (double)
+    - Error reduction parameter. 
+    - Default = 0.4
+  - cfm (double)
+    - Constraint force mixing. 
+    - Default = 0.8
+
+
+  \par Example
+  \verbatim
+  <joint:screw name="screw_joint>
+    <body1>body1_name</body1>
+    <body2>body2_name</body2>
+    <anchor>anchor_body</anchor>
+    <axis>0 0 1</axis>
+    <lowStop>0</lowStop>
+    <highStop>30</highStop>
+  </joint:screw>
+  \endverbatim
+*/
+/// \}
+
+
+/// \addtogroup gazebo_screw_joint Screw Joint
+/// \{
+
+  /// \brief A screw joint
+  class BulletScrewJoint : public ScrewJoint<BulletJoint>
+  {
+    /// \brief Constructor
+    public: BulletScrewJoint( btDynamicsWorld *world );
+  
+    /// \brief Destructor
+    public: virtual ~BulletScrewJoint();
+  
+    /// \brief Load the joint
+    protected: virtual void Load(XMLConfigNode *node);
+
+    /// \brief Attach the two bodies with this joint
+    public: void Attach( Body *one, Body *two );
+ 
+    /// \brief Get the axis of rotation
+    public: virtual Vector3 GetAxis(int index) const;
+
+    /// \brief Set the axis of motion
+    public: void SetAxis( int index, const Vector3 &axis );
+  
+    /// \brief Set joint damping, not yet implemented
+    public: virtual void SetDamping(int index, const double damping);
+
+    /// \brief Set the high stop of an axis(index).
+    public: virtual void SetHighStop(int index, Angle angle);
+
+    /// \brief Set the low stop of an axis(index).
+    public: virtual void SetLowStop(int index, Angle angle);
+ 
+    /// \brief Get the high stop of an axis(index).
+    public: virtual Angle GetHighStop(int index);
+
+    /// \brief Get the low stop of an axis(index).
+    public: virtual Angle GetLowStop(int index);
+
+    /// \brief Get the position of the joint
+    public: virtual Angle GetAngle(int index) const;
+  
+    /// \brief Get the rate of change
+    public: virtual double GetVelocity(int index) const;
+
+     /// \brief Set the velocity of an axis(index).
+    public: virtual void SetVelocity(int index, double angle);
+
+    /// \brief Set the screw force
+    public: virtual void SetForce(int index, double force);
+
+    /// \brief Set the max allowed force of an axis(index).
+    public: virtual void SetMaxForce(int index, double t);
+
+    /// \brief Get the max allowed force of an axis(index).
+    public: virtual double GetMaxForce(int index);
+
+  };
+  
+/// \}
+}
+#endif
diff -r d1c050d67b0a server/physics/bullet/CMakeLists.txt
--- a/server/physics/bullet/CMakeLists.txt	Fri Apr 08 10:52:57 2011 -0700
+++ b/server/physics/bullet/CMakeLists.txt	Wed Apr 13 16:57:40 2011 -0700
@@ -51,6 +51,7 @@
              BulletMotionState.cc
              BulletJoint.cc
              BulletSliderJoint.cc
+             BulletScrewJoint.cc
              BulletHingeJoint.cc
              BulletHinge2Joint.cc
              BulletUniversalJoint.cc
diff -r d1c050d67b0a server/physics/ode/CMakeLists.txt
--- a/server/physics/ode/CMakeLists.txt	Fri Apr 08 10:52:57 2011 -0700
+++ b/server/physics/ode/CMakeLists.txt	Wed Apr 13 16:57:40 2011 -0700
@@ -17,6 +17,7 @@
              ODEBody.cc
              ODEJoint.cc
              ODESliderJoint.cc
+             ODEScrewJoint.cc
              ODEHingeJoint.cc
              ODEHinge2Joint.cc
              ODEUniversalJoint.cc
@@ -32,6 +33,7 @@
              ODEBody.hh
              ODEJoint.hh
              ODESliderJoint.hh
+             ODEScrewJoint.hh
              ODEHingeJoint.hh
              ODEHinge2Joint.hh
              ODEUniversalJoint.hh
diff -r d1c050d67b0a server/physics/ode/ODEPhysics.cc
--- a/server/physics/ode/ODEPhysics.cc	Fri Apr 08 10:52:57 2011 -0700
+++ b/server/physics/ode/ODEPhysics.cc	Wed Apr 13 16:57:40 2011 -0700
@@ -42,6 +42,7 @@
 #include "FixedJoint.hh"
 #include "ODEHingeJoint.hh"
 #include "ODEHinge2Joint.hh"
+#include "ODEScrewJoint.hh"
 #include "ODESliderJoint.hh"
 #include "ODEBallJoint.hh"
 #include "ODEUniversalJoint.hh"
@@ -694,6 +695,8 @@
   {
     case Joint::FIXED:
       return new FixedJoint();
+    case Joint::SCREW:
+      return new ODEScrewJoint(this->worldId);
     case Joint::SLIDER:
       return new ODESliderJoint(this->worldId);
     case Joint::HINGE:
diff -r d1c050d67b0a server/physics/ode/ODEScrewJoint.cc
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/server/physics/ode/ODEScrewJoint.cc	Wed Apr 13 16:57:40 2011 -0700
@@ -0,0 +1,220 @@
+/*
+ *  Gazebo - Outdoor Multi-Robot Simulator
+ *  Copyright (C) 2003
+ *     Nate Koenig & Andrew Howard
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+/* Desc: A screw or primastic joint
+ * Author: Nate Keonig, Andrew Howard
+ * Date: 21 May 2003
+ * CVS: $Id: ODEScrewJoint.cc 7039 2008-09-24 18:06:29Z natepak $
+ */
+
+#include "gazebo_config.h"
+#include "GazeboMessage.hh"
+#include "Body.hh"
+#include "XMLConfig.hh"
+#include "ODEScrewJoint.hh"
+#include <boost/signal.hpp>
+#include <boost/bind.hpp>
+
+using namespace gazebo;
+
+//////////////////////////////////////////////////////////////////////////////
+// Constructor
+ODEScrewJoint::ODEScrewJoint( dWorldID worldId )
+    : ScrewJoint<ODEJoint>()
+{
+  Param::Begin(&this->parameters);
+  this->threadPitchP = new ParamT<double>("threadPitch", 1.0, 0);
+  Param::End();
+#if ODE_SCREW_JOINT
+  this->jointId = dJointCreateScrew( worldId, NULL );
+#endif
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Destructor
+ODEScrewJoint::~ODEScrewJoint()
+{
+  delete this->threadPitchP;
+}
+
+//////////////////////////////////////////////////////////////////////////////
+/// Load the joint
+void ODEScrewJoint::Load(XMLConfigNode *node)
+{
+  ScrewJoint<ODEJoint>::Load(node);
+  this->threadPitchP->Load(node);
+  this->SetThreadPitch(0, this->threadPitchP->GetValue());
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Get the axis of rotation
+Vector3 ODEScrewJoint::GetAxis(int /*index*/) const
+{
+  dVector3 result;
+  this->physics->LockMutex();
+#if ODE_SCREW_JOINT
+  dJointGetScrewAxis( this->jointId, result );
+#endif
+  this->physics->UnlockMutex();
+
+  return Vector3(result[0], result[1], result[2]);
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Get the position of the joint
+Angle ODEScrewJoint::GetAngle(int index) const
+{
+  this->physics->LockMutex();
+#if ODE_SCREW_JOINT
+  Angle result = dJointGetScrewPosition( this->jointId );
+#else
+  Angle result(0.0);
+#endif
+  this->physics->UnlockMutex();
+  
+  return result;
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Get the rate of change
+double ODEScrewJoint::GetVelocity(int /*index*/) const
+{
+  this->physics->LockMutex();
+#if ODE_SCREW_JOINT
+  double result = dJointGetScrewPositionRate( this->jointId );
+#else
+  double result = 0.0;
+#endif
+  this->physics->UnlockMutex();
+
+  return result;
+}
+
+//////////////////////////////////////////////////////////////////////////////
+/// Set the velocity of an axis(index).
+void ODEScrewJoint::SetVelocity(int /*index*/, double angle)
+{
+  this->SetParam(dParamVel, angle);
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Set the axis of motion
+void ODEScrewJoint::SetAxis( int /*index*/, const Vector3 &axis )
+{
+  this->physics->LockMutex();
+  if (this->body1) this->body1->SetEnabled(true);
+  if (this->body2) this->body2->SetEnabled(true);
+
+#if ODE_SCREW_JOINT
+  dJointSetScrewAxis( this->jointId, axis.x, axis.y, axis.z );
+#endif
+  this->physics->UnlockMutex();
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Set the joint damping
+void ODEScrewJoint::SetDamping( int /*index*/, const double damping )
+{
+  this->damping_coefficient = damping;
+#ifdef INCLUDE_ODE_JOINT_DAMPING
+  this->physics->LockMutex();
+  // ode does not yet support screw joint damping
+  dJointSetDamping( this->jointId, this->damping_coefficient);
+  this->physics->UnlockMutex();
+#else
+  // alternaitvely, apply explicit damping
+  this->ConnectJointUpdateSignal(boost::bind(&ODEScrewJoint::ApplyDamping,this));
+#endif
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Set thread pitch
+void ODEScrewJoint::SetThreadPitch( int /*index*/, const double thread_pitch )
+{
+  this->physics->LockMutex();
+#if ODE_SCREW_JOINT
+  //std::cout << "\n\n\n\nsetting threadPitch: " << thread_pitch << "\n\n\n\n\n";
+  dJointSetScrewThreadPitch( this->jointId, thread_pitch);
+#endif
+  this->physics->UnlockMutex();
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// callback to apply joint damping force
+void ODEScrewJoint::ApplyDamping()
+{
+  double damping_force = this->damping_coefficient * this->GetVelocity(0);
+  this->SetForce(0,damping_force);
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Set the screw force
+void ODEScrewJoint::SetForce(int /*index*/, double force)
+{
+  this->physics->LockMutex();
+  if (this->body1) this->body1->SetEnabled(true);
+  if (this->body2) this->body2->SetEnabled(true);
+
+#if ODE_SCREW_JOINT
+  dJointAddScrewForce(this->jointId, force);
+#endif
+  this->physics->UnlockMutex();
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Set the _parameter
+void ODEScrewJoint::SetParam( int parameter, double value )
+{
+  this->physics->LockMutex();
+  ODEJoint::SetParam(parameter, value);
+#if ODE_SCREW_JOINT
+  dJointSetScrewParam( this->jointId, parameter, value );
+#endif
+  this->physics->UnlockMutex();
+}
+
+//////////////////////////////////////////////////////////////////////////////
+// Get the _parameter
+double ODEScrewJoint::GetParam( int parameter ) const
+{
+  this->physics->LockMutex();
+#if ODE_SCREW_JOINT
+  double result = dJointGetScrewParam( this->jointId, parameter );
+#else
+  double result = 0.0;
+#endif
+  this->physics->UnlockMutex();
+
+  return result;
+}
+
+//////////////////////////////////////////////////////////////////////////////
+/// Set the max allowed force of an axis(index).
+void ODEScrewJoint::SetMaxForce(int index, double t) 
+{
+  this->SetParam(dParamFMax, t);
+}
+
+//////////////////////////////////////////////////////////////////////////////
+/// Get the max allowed force of an axis(index).
+double ODEScrewJoint::GetMaxForce(int index)
+{
+  this->GetParam(dParamFMax);
+}
diff -r d1c050d67b0a server/physics/ode/ODEScrewJoint.hh
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/server/physics/ode/ODEScrewJoint.hh	Wed Apr 13 16:57:40 2011 -0700
@@ -0,0 +1,142 @@
+/*
+ *  Gazebo - Outdoor Multi-Robot Simulator
+ *  Copyright (C) 2003  
+ *     Nate Koenig & Andrew Howard
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+/* Desc: A screw or primastic joint
+ * Author: Nate Keonig, Andrew Howard
+ * Date: 21 May 2003
+ * CVS: $Id: ScrewJoint.hh 7039 2008-09-24 18:06:29Z natepak $
+ */
+
+#ifndef ODESCREWJOINT_HH
+#define ODESCREWJOINT_HH
+
+#include "Param.hh"
+#include "ScrewJoint.hh"
+#include "ODEJoint.hh"
+
+namespace gazebo
+{
+
+/// \addtogroup gazebo_physics_joints
+/// \{
+/** \defgroup gazebo_screw_joint Screw Joint
+  
+  \brief A screw joint
+
+  \par Attributes
+  - body1 (string)
+    - Name of the first body to attach to the joint
+  - body2 (string)
+    - Name of the second body to attach to the joint
+  - anchor (string)
+    - Name of the body which will act as the anchor to the joint
+  - axis (float, tuple)
+    - Defines the axis of movement
+    - Default: 0 0 1
+  - lowStop (float, meters)
+    - The low stop position
+    - Default: infinity
+  - highStop (float, meters)
+    - The high stop position
+    - Default: infinity
+  - erp (double)
+    - Error reduction parameter. 
+    - Default = 0.4
+  - cfm (double)
+    - Constraint force mixing. 
+    - Default = 0.8
+
+
+  \par Example
+  \verbatim
+  <joint:screw name="screw_joint>
+    <body1>body1_name</body1>
+    <body2>body2_name</body2>
+    <anchor>anchor_body</anchor>
+    <axis>0 0 1</axis>
+    <lowStop>0</lowStop>
+    <highStop>30</highStop>
+  </joint:screw>
+  \endverbatim
+*/
+/// \}
+
+
+/// \addtogroup gazebo_screw_joint Screw Joint
+/// \{
+
+  /// \brief A screw joint
+  class ODEScrewJoint : public ScrewJoint<ODEJoint>
+  {
+    /// \brief Constructor
+    public: ODEScrewJoint( dWorldID worldId );
+  
+    /// \brief Destructor
+    public: virtual ~ODEScrewJoint();
+  
+    /// \brief Load the joint
+    protected: virtual void Load(XMLConfigNode *node);
+
+    /// \brief Get the axis of rotation
+    public: virtual Vector3 GetAxis(int index) const;
+
+    /// \brief Set the axis of motion
+    public: virtual void SetAxis( int index, const Vector3 &axis );
+  
+    /// \brief Set joint damping, not yet implemented
+    public: virtual void SetDamping(int index, const double damping);
+
+    /// \brief Set screw joint thread pitch
+    public: virtual void SetThreadPitch(int index, const double thread_pitch);
+
+    /// \brief callback to apply damping force to joint
+    public: void ApplyDamping();
+
+    /// \brief Get the position of the joint
+    public: virtual Angle GetAngle(int index) const;
+
+    /// \brief Get the rate of change
+    public: virtual double GetVelocity(int index) const;
+
+    /// \brief Set the velocity of an axis(index).
+    public: virtual void SetVelocity(int index, double angle);
+
+    /// \brief Set the screw force
+    public: virtual void SetForce(int index, double force);
+
+    /// \brief Set the max allowed force of an axis(index).
+    public: virtual void SetMaxForce(int index, double t);
+
+    /// \brief Get the max allowed force of an axis(index).
+    public: virtual double GetMaxForce(int index);
+
+    /// \brief Get the _parameter
+    public: virtual double GetParam( int parameter ) const;
+
+    /// \brief Set the _parameter
+    public: virtual void SetParam( int parameter, double value);
+
+    // thread_pitch
+    private: ParamT<double> *threadPitchP; 
+  };
+  
+/// \}
+}
+#endif
